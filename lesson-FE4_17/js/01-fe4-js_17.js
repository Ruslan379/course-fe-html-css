console.log(
    '%c 1.Що таке Пагінація. ',
    'color: white; background-color: #D33F49',
);

//! Пагінація
//? ✳️ База даних може зберігати колекції,
//? що містять сотні мільйонів записів.
//? Тому повертати всю колекцію на кожен
//? GET-запит - занадто ресурсозатратно.
//? Розмір тіла відповіді буде занадто великий,
//? і час запиту затягнеться на десятки секунд,
//? або навіть хвилини - чим більше даних
//? у відповіді від бекенду,
//? тим довше вона передається мережею.

//? ✳️ До того ж, необхідно думати про користувачів
//? - навряд чи їм потрібні усі мільйони записів відразу.
//? Обробка такої великої кількості даних у відповіді
//? і відображення інтерфейсу потребує величезних
//? ресурсів пристрою, на якому переглядається веб-сторінка.
//? За статистикою, користувачі знаходять цікаву
//? для них інформацію на декількох перших екранах.

//? ✴️ Припустимо наш бекенд my-api.com зберігає 
//? дуже велику колекцію постів у ресурсі /posts, 
//? яку зобразимо дванадцятьма елементами на ілюстрації.
console.warn(`Вся колекція: \n ${((window.location.href).split('/')).slice(0, -2).join('/') + '/'}${"lesson-FE4_17/images/no-pagination.png"}`);
//? ✴️ На кожен GET-запит бекенду доведеться повернути
//? всю колекцію, і ми зіткнемося з проблемами,
//? описаними раніше.

//? ✴️ Для їх вирішення існує ПАГІНАЦІЯ - прийом, 
//? за яким, на перший і кожен наступний GET-запит 
//? повертається не вся колекція, а певна її частина. 
//? Пагінація реалізується на бекенді і використовується 
//? на фронтенді за допомогою спеціальних параметрів запиту.
console.log("--------------------------------------------------------------");
