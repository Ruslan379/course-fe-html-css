console.log(
    '%c 1.Promise.allSettled(promises). ',
    'color: white; background-color: #D33F49',
);


//! Promise.allSettled(promises)
//? ‚ú¥Ô∏è –ú–µ—Ç–æ–¥ Promise.allSettled(promises)
//? –≤–∏–∫–æ–Ω—É—î –≤—Å—ñ –ø—Ä–æ–º—ñ—Å–∏ –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –º–∞—Å–∏–≤—É
//? —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–º—ñ—Å—É
//? ‚Äî –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–µ—è–∫—ñ –∑ –Ω–∏—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é.

//? ‚ú¥Ô∏è –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ Promise.all,
//? —è–∫–∏–π –ø—Ä–∏–ø–∏–Ω—è—î —Ä–æ–±–æ—Ç—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ–º—É –ø—Ä–æ–º—ñ—Å—ñ,
//? allSettled —á–µ–∫–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö
//? —ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∑:
//? üî∏ status - "fulfilled" (—É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∏–π) –∞–±–æ "rejected" (–≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π);
//? üî∏ value - —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—è–∫—â–æ —É—Å–ø—ñ—à–Ω–∏–π);
//? üî∏ reason - –ø—Ä–∏—á–∏–Ω–∞ –ø–æ–º–∏–ª–∫–∏ (—è–∫—â–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ).

//? ‚úÖ –î–µ –∫–æ—Ä–∏—Å–Ω–∏–π Promise.allSettled:
//? üî∏ –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å,
//?    –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–µ—è–∫—ñ –∑ –Ω–∏—Ö –≤–ø–∞–¥—É—Ç—å.
//? üî∏ –ü—Ä–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤,
//?    –¥–µ –ø–æ–º–∏–ª–∫–∏ –¥–µ—è–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –ø–µ—Ä–µ—Ä–∏–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.
console.log(
    `%c
    const promiseA = makePromise("promiseA value", 1000); 
    const promiseB = makePromise("promiseB value", 3000); 
    const promiseC = makePromise("promise–° value", 2000);
    
    Promise.allSettled([promiseA, promiseB, promiseC])
    .then(value => console.log(value));
    `,
    'color: blue; font-size: 18px',
);
console.log(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
const delayTime = 2500; 

const makePromise = (text, delay) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (delay <= delayTime) {
                resolve(text);
            } else {
                reject("‚ùå Error!");
            };
        }, delay)
    });
};

const promiseA = makePromise("promiseA value", 1000); //* ‚úÖ
const promiseB = makePromise("promiseB value", 3000); //! ‚ùå
const promiseC = makePromise("promise–° value", 2000); //* ‚úÖ


Promise.allSettled([promiseA, promiseB, promiseC])
    .then(value => console.log("Promise.allSettled([promiseA, promiseB, promiseC]).then(value):\n", value))
    // .catch(error => console.log(error)) 
    .finally(() => { console.log("-------------------------------------------------------------------------------------");});

//todo: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω–æ–ª—ñ:
//? [
//*     0: { status: 'fulfilled', value: 'promiseA value' },
//!     1: { status: 'rejected', reason: '‚ùå Error!' },
//*     2: { status: 'fulfilled', value: 'promiseC value' }
//? ]
// console.log("-----------------------------------------------------------------------------------------");
