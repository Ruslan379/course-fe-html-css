console.log(
  '%c 2.Синтаксис async/await. ',
  'color: white; background-color: #D33F49',
);

//! Синтаксис async/await
console.warn("Синтаксис async/await:");
//? ✴️ Асинхронні функції (async/await)
//? - зручний спосіб написання асинхронного коду,
//? який зовні стає схожим на синхронний.
//? В основі синтаксису async/await лежать проміси,
//? тому він не блокує основний потік виконання програми.
//? ✴️ Для оголошення асинхронної стрілочної функції,
//? перед списком параметрів додаємо ключове слово async.
//? Всередині неї можна використовувати оператор await
//? і праворуч від нього поставити щось, що поверне проміс.
//? Метод response.json() також повертає проміс, тому ставимо await.
console.log(
  `%c
    const fetchUsers = async () => {
      const response = await fetch("https://jsonplaceholder.typicode.com/users");
      const users = await response.json();
      return users;
    };

    fetchUsers().then(users => console.log(users));
    `,
  'color: blue; font-size: 18px',
);
console.log("--------------------------------------------------------------------------------------------------------------------------");


//! Використання синтаксису async/await
console.warn("Використання синтаксису async/await:");
//? ✴️ Коли інтерпретатор зустрічає await,
//? він призупиняє виконання цієї функції (не тільки скрипта)
//? і чекає, доки не виконається проміс праворуч від await.
//? Щойно проміс виконався - виконання функції відновлюється
//? і на рядку нижче нам доступний результат асинхронної операції.
//?     📌 Використання синтаксису async/await:
//? 🔸 Оператор await можна використовувати тільки у тілі асинхронної (async) функції.
//? 🔸 Оператор await призупиняє функцію, доки проміс не виконається (fulfilled або rejected).
//? 🔸 Якщо проміс виконався успішно (fulfilled), оператор await поверне його значення.
//? 🔸 Якщо проміс був відхилений з помилкою (rejected), оператор await викине помилку.
//? 🔸 Асинхронна функція завжди повертає проміс, тому будь-яке значення, що повертається, буде його значенням.
//? 🔸 Якщо не вказати значення, що повертається, повернеться проміс зі значенням undefined.
console.log(
  `%c
    🔸 Оператор await можна використовувати тільки у тілі асинхронної (async) функції.
    🔸 Оператор await призупиняє функцію, доки проміс не виконається (fulfilled або rejected).
    🔸 Якщо проміс виконався успішно (fulfilled), оператор await поверне його значення.
    🔸 Якщо проміс був відхилений з помилкою (rejected), оператор await викине помилку.
    🔸 Асинхронна функція завжди повертає проміс, тому будь-яке значення, що повертається, буде його значенням.
    🔸 Якщо не вказати значення, що повертається, повернеться проміс зі значенням undefined.
    `,
  'color: blue; font-size: 18px',
);
console.log("--------------------------------------------------------------------------------------------------------------------------");


//! Приклади використання синтаксису async/await
console.warn("Приклади використання синтаксису async/await:");
//? ✳️ Будь-яка функція може бути асинхронною, 
//? чи то метод об'єкта, класу, колбек, оголошення 
//? або інлайн функція. 
//? Всі вони зможуть використовувати оператор await 
//? і обов'язково повернуть проміс, 
//? тому що будуть асинхронними функціями.
console.log(
  `%c
    //! Function declaration
    async function foo() {
      // ...
    }


    //! Functional expression
    const foo = async function () {
      // ...
    };


    //! Arrow function
    const foo = async () => {
      // ...
    };


    //! Object method
    const user = {
      async foo() {
        // ...
      },
    };


    //! Class method
    class User {
      async foo() {
        // ...
      }
    }
    `,
  'color: blue; font-size: 18px',
);
console.log("--------------------------------------------------------------------------------------------------------------------------");

//! ✳️ Синтаксис async/await:
const fetchUsers = async () => {
  const response = await fetch("https://jsonplaceholder.typicode.com/users");
  const users = await response.json();
  return users;
};

fetchUsers()
  .then(users => console.log("users:", users))
  .finally(() => console.log("--------------------------------------------------------------------------------------------------------------------------"));

//! users: (10)[{… }, {… }, {… }, {… }, {… }, {… }, {… }, {… }, {… }, {… }]
// console.log("--------------------------------------------------------------------------------------------------------------------------");
